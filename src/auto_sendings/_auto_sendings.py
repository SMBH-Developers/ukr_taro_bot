from aiogram import types
from aiogram.utils import markdown

from sqlalchemy import Update, TIMESTAMP
from sqlalchemy import func, cast
from sqlalchemy.sql.expression import select, update

from loguru import logger
from datetime import datetime, timedelta
from ._base import BaseSending
from ..models import async_session, User

# For future

__all__ = ["Sending2Hours", "Sending24Hours"]


class Sending2Hours(BaseSending):
    is_active = True
    text = f'üôå–î–æ—Ä–æ–≥—ñ –º–æ—ó, —è –ø–æ—Å–ø—ñ—à–∞—é –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ —Ç–µ, —â–æ –∑–∞–ª–∏—à–∏–ª–æ—Å—è –≤—Å—å–æ–≥–æ 6 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –º—ñ—Å—Ü—å –Ω–∞ —Ä–æ–∑–∫–ª–∞–¥ –∫–∞—Ä—Ç —Ç–∞—Ä–æ\n\nüíå–ù–µ —É–ø—É—Å—Ç—ñ—Ç—å —Å–≤—ñ–π —à–∞–Ω—Å —ñ –Ω–∞–ø–∏—à—ñ—Ç—å: ¬´–∫–∞—Ä—Ç–∞ –¥–æ–ª—ñ¬ª –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî @tarolog_anna_pier üëà\n\nüìù–ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É –Ω–∞ —Ç–∞—Ä–æ –º–∏ –∑–º–æ–∂–µ–º–æ –≤–∏—è–≤–∏—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∂–∏—Ç—Ç—î–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏, –∑ —è–∫–∏–º–∏ –≤–∏ –∑—ñ—Ç–∫–Ω–µ—Ç–µ—Å—è –≤ —Ü—å–æ–º—É –º—ñ—Å—è—Ü—ñ, —ñ –∑–Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö –¥–ª—è —ó—Ö –≤–∏—Ä—ñ—à–µ–Ω–Ω—è'
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üåü–ó–º—ñ–Ω–∏—Ç–∏ –∂–∏—Ç—Ç—è", url='https://t.me/tarolog_anna_pier '))

    to_log: str = '2h_sending'

    def requirements(self):
        return ((User.registration_date + timedelta(hours=2)) < datetime.now(),
                User.got_2h_autosending.is_(None), User.stage != 'stage_4', User.status == 'alive')

    def _update_query_on_success(self, user: int) -> Update:
        return update(User).where(User.id == user).values(got_2h_autosending=func.now())

    async def start(self):
        try:
            if self._verify():
                return await super().start()
        except ValueError as ex:
            logger.info(f'Sending2Hours {ex.args}')


class Sending24Hours(BaseSending):
    is_active = True
    text = f'–î–æ–±—Ä–∏–π –¥–µ–Ω—å, –∑–∞—Ä–∞–∑ –Ω–µ —Å–∞–º–∏–π  –ø—Ä–æ—Å—Ç–∏–π —á–∞—Å –¥–ª—è –Ω–∞—Å —É—Å—ñ—Ö, —Ü–µ –ø–µ—Ä—ñ–æ–¥ —Ç—Ä—É–¥–Ω–æ—â—ñ–≤ –Ω–∞ —à–ª—è—Ö—É, –Ω–µ —É–ø—É—Å—Ç—ñ—Ç—å –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑—Ä–æ–±–∏—Ç–∏ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ —Ç–∞—Ä–æ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å–æ–±–∏—Å—Ç—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≤—ñ–¥ –≤–µ–¥—É—á–æ–≥–æ —Ç–∞—Ä–æ–ª–æ–≥–∞ –£–∫—Ä–∞—ó–Ω–∏ (–¥–∏–≤. –∫—É–¥–∏ —Å—Ç–∞–≤–∏–º–æ)\n\n–£ —Ä–æ–∑–∫–ª–∞–¥—ñ –í–∏ –¥—ñ–∑–Ω–∞—î—Ç–µ—Å—è –ø—Ä–æ —Ç–µ, —è–∫ –º–æ–∂–Ω–∞ –≤–∏—Ä—ñ—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –∂–∏—Ç—Ç—î–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ —ñ —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–¥–∞–ª—å—à–∏—Ö –Ω–µ–≤–¥–∞—á –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É –º—ñ—Å—è—Ü—ñ.\n\n–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ ¬´–∫–∞—Ä—Ç—É —É—Å–ø—ñ—Ö—É¬ª –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö ‚Äî @tarolog_anna_pier üëà\n\nüîÆ–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –º—ñ—Å—Ü—å –æ–±–º–µ–∂–µ–Ω–æ!'
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üîÜ–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Ç–∞—Ä–æ—Ä–æ–∑–∫–ª–∞–¥", url='https://t.me/tarolog_anna_pier '))
    to_log: str = '24h_sending'

    def requirements(self):
        return ((User.got_2h_autosending + timedelta(hours=22)) < datetime.now(),
                User.got_24h_autosending.is_(None), User.stage != 'stage_4', User.status == 'alive')

    def _update_query_on_success(self, user: int) -> Update:
        return update(User).where(User.id == user).values(got_24h_autosending=func.now())

    async def start(self):
        try:
            if self._verify():
                await super().start()
        except ValueError as ex:
            logger.info(f'Sending24Hours {ex.args}')
